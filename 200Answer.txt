1. Intermediate Console and Variables (10 Questions)
	1.	Create a program that calculates and logs the result of (5 + 3) * 2 - 8 / 4.

answer=>  console.log((5+3)*2 -(8/4))

	2.	Log the value of a variable before and after incrementing it using ++.
answer=> let a = 10;
console.log(a)
a++;
console.log(a)


	3.	Write a program that swaps the values of two variables without using a third variable.
 ans=> let a = 10;
let b = 20;

a = a * b;
b = a / b;
a = a / b;
console.log(a, b);

         
	4.	Create a variable with a template literal that includes your name and age.

answer=>

        let name = "Siddahrth"
        let age ="20"
        let detail =`${name} ${age}`
        console.log(detail)

	5.	Use console.table() to display the following object: { name: "John", age: 30, city: "New York" }.
answer=> const obj = { name: "John", age: 30, city: "New York" };
console.table(obj)


	6.	Create a program that uses console.group() to group related logs.

answer=>  let obj = { name: "John", age: 30, city: "New York" };


console.group(obj)

	7.	Use console.time() and console.timeEnd() to measure the execution time of a simple loop.
answer=> 
for(let i = 1;i<11;i++){
    console.time(i)
    console.timeEnd(i)
}


	8.	Log a variable’s value dynamically by including it in a string: "The value is: <value>".

answer=>
    let name = "SIddharth"
console.log(`name is ${name}`)

	9.	Use console.trace() to debug a function call stack.

answer=> 
function outer(a){
    inner()
}
outer()
function inner(){
console.trace()
}
inner()


	10.	Create and log an object dynamically using computed property names.

answer=>     
         let userAge = 10;
const age = 18;
const key1 = "ageIsGreaterThen18";
const key2 = "ageIsLessThen18";

const obj = {
  name: "Siddharth",
  [userAge > age ? key1 : key2]: true,
};
console.log(obj);


2. Advanced Loops (10 Questions)
	11.	Write a nested loop to generate a multiplication table (1 to 10).

answer=>  // let num = 10;
// for(let i =1;i<11;i++){
//     for(let j=0;j<11;j++){
//         console.log(i*j)
//     }
// }

for (let i = 1; i <= 10; i++) {
  console.log(`Table of ${i} :`);
  for (let j = 1; j <= 10; j++) {
    console.log(` ${i} X  ${j} = ${i * j}`);
  }
}

	12.	Use a for...in loop to iterate through the properties of an object.

answer=>  let obj = { name: "John", age: 30, city: "New York" };

for (let key in obj) {
  console.log(key);
}


	13.	Write a program to calculate the sum of all even numbers between 1 and 100 using a for loop.
answer=> const evenSum = () => {
  let sum = 0;
  for (let i = 1; i < 101; i++) {
    if (i % 2 === 0) {
      sum += i;
    }
  }
  return sum
};
console.log(evenSum())



	14.	Use a for...of loop to iterate over a string and count the vowels.
answer=> let name = "Siddharth";

let vowels = "aeiouAEIOU";
let count = 0;
for (let char of name) {
  if (vowels.includes(char)) {
    count++;
  }
}
console.log(count)


	15.	Create a loop that breaks out when a specific condition is met (e.g., number divisible by 7).
answer=>for (let i = 1; i < 101; i++) {
  if (i % 7 === 0) {
    console.log(i);
    break;
  }
}
or 
let i = 1;

while (true) {
  if (i % 7 === 0) {
    console.log(`Breaking at number ${i}`);
    break;
  }
  i++;
}

	16.	Write a loop that skips numbers divisible by 3 but logs all others up to 20.

answer=> for (let i = 1; i < 21; i++) {
  if (i % 3 === 0) {
  } else {
    console.log(i);
  }
}
	17.	Use a do...while loop to prompt the user until they enter a positive number.
answer=> let num;
do {
  num = prompt();
  if (num > 0) {
    break;
  }
} while (true);


	18.	Write a nested loop to generate a pyramid pattern:    
   *
  ***
 *****
*******
answer=>   let n = 5;

for (let i = 1; i <= 5; i++) {
  let rows = "";
  

  //adding spaces
  for (let j = 1; j <= n - i; j++) {
    rows += " ";
  }
  //adding star
  for (let k = 1; k <= 2 * i - 1; k++) {
    rows += "*";
  }
  console.log(rows);
}


	19.	Use a loop to reverse a string "JavaScript".

answer=> let str = "Siddharth";
let reverse = "";
for (let i = str.length-1; i >=0; i--) {
 reverse+=str[i]
}
console.log(reverse);

20.	Write a program to calculate the product of all numbers in an array using a loop.
answer=> 
let arr = [, 2, 3, 4, 4, 56, 7];

let sum = 0;
arr.forEach((elem) => {
  sum += elem;
});
console.log(sum)


3. Arrays and Objects (10 Questions)
	21.	Write a program to merge two arrays and remove duplicate values.

answer=> let arr1 = [1, 2, 34, 5, 6];
let arr2 = [1, 2, 3, 4, 4];

let mergeArray = [...arr1, ...arr2];

let uniqueArray = [...new Set(mergeArray)];
console.log(uniqueArray);

	22.	Create a program to find the second largest number in an array.

let arr = [1, 4, 5, 2, 3, 2, 3, 4];

let largest = -Infinity;
let secondLargest = -Infinity;

for (let i = 0; i <= arr.length - 1; i++) {
  if (arr[i] > largest) {
    secondLargest = largest;
    largest = arr[i];
  } else if (arr[i] > secondLargest && arr[i] !== largest) {
    secondLargest = arr[i];
  }
}
console.log(secondLargest);

	23.	Write a function that removes all falsy values from an array.
answer=>      const arr = [1, 2, 0, false, null];

const removeFalsyVal = (arr) => {
  return arr.filter((elem) => Boolean(elem));
};
console.log(removeFalsyVal(arr))


	24.	Use .reduce() to find the total sum of numbers in an array.

answer=>
let arr = [1, 2, 3, 4, 56];

let sum = arr.reduce((acc, calVal) => acc + calVal, 0);
console.log(sum)

	25.	Write a program that rotates an array to the left by n positions.
answer=>   function leftRotateByK(arr, K) {
  K = K % arr.length;
  let newarr = arr.splice(0, K);
  arr.push(...newarr);
  return arr
}

let arr = [1, 2, 3, 4, 5];
let K = 1;
let rotatedArray = leftRotateByK(arr, K);
console.log(`Array after Left Rotation by ${K} elements:`, rotatedArray);


      

	26.	Use .find() to locate the first even number in an array.
answer=> let arr = [1, 3, 4];
let firstElem = arr.find((elem) => elem % 2 === 0);
console.log(firstElem)

	27.	Create a function that flattens a nested array (e.g., [1, [2, [3]]] → [1, 2, 3]).

answer=> let arr = [1, [2, [3]]];

let flatarray = arr.flat(Infinity);

	28.	Write a program that counts how many times each element appears in an array.
answer=>
      let arr = [1, [2, [3]]];

const flatArray = (arr) => {
  let flatArrayResult = [];
  for (let i = 0; i <= arr.length - 1; i++) {
    if (Array.isArray(arr[i])) {
      flatArrayResult = flatArrayResult.concat(flatArray(arr[i]));
    } else {
      flatArrayResult.push(arr[i]);
    }
  }
  return flatArrayResult;
};
console.log(flatArray(arr));

	29.	Use .some() and .every() to check conditions on an array.
answer=>  
let arr = [1, 2, 3, 4, 5, 6, 7, 8];
let result = arr.some((elem) => elem % 2 === 0);
console.log(result);

let arr2 = [2, 4, 6, 8, 10, 12];

let result2 = arr2.every((elem) => elem % 2 === 0);
console.log(result2);


	30.	Sort an array of objects by a specific property.
answer=>       
let arrofObject = [
  { name: "Siddharth", age: 24 },
  { name: "John", age: 21 },
  { name: "Anaya", age: 18 },
];

const sorttedByAge = arrofObject.sort((a, b) => a.age - b.age);
console.log(sorttedByAge);


4. Functions and Closures (10 Questions)
	31.	Write a function that returns another function to calculate the power of a number.
answer=>    const outerFunction = (a) => {
  return function innerFunctio(b) {
    return a ** b
  };
};
console.log(outerFunction(2)(3));

	32.	Create a recursive function to calculate the Fibonacci sequence up to n terms.
answer=> const fibonacci = (n) => {
  if (n <= 1) {
    return n;
  }
  return fibonacci(n - 1) + fibonacci(n - 2);
};
const getSequenceOfFab = (n) => {
  let sequence = [];
  for (let i = 0; i < n; i++) {
    sequence.push(fibonacci(i));
  }
  return sequence
};
console.log(getSequenceOfFab(7))


	33.	Write a function that uses closures to create a counter.
answer=>    const createCounter = () => {
  let count = 0;

  return {
    increment: () => {
      count++;
      console.log(count);
    },
    decrement: () => {
      count--, console.log(count);
    },
    getCount: () => {
      console.log(count);
    },
  };
};


let counter = createCounter()
counter.increment()
 
	34.	Create a function that memoizes the result of a computation.
answer=>     

	
answer=>     const memoize = (func) => {
  const cache = {};

  return (...args) => {
    const key = JSON.stringify(args);
    if (cache[key]) {
      console.log("Fetching from cache...");
      return cache[key];
    } else {
      const result = func(...args);
      cache[key] = result;
      return result;
    }
  };
};

const factorial = (n) => {
  if (n <= 1) {
    return n;
  }
  return n * factorial(n - 1);
};

const memoizedFactorial = memoize(factorial);
console.log(memoizedFactorial(5));
console.log(memoizedFactorial(5));


   35.	Write a function to debounce a button click event.
 answer=>  
   
	36.	Implement a function that throttles an API call.
annswe=>     
	37.	Create a higher-order function that applies a callback to each element of an array.
	38.	Write a function that calculates the GCD (Greatest Common Divisor) of two numbers.
	39.	Create a function that accepts an array of functions and executes them sequentially.
	40.	Write a function to curry a simple mathematical operation.


